generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int      @id @default(autoincrement())
  email               String   @unique
  name                String?
  password            String
  systemRole          String   @default("user") // "user", "admin", "superadmin"
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  image               String   @default("/images/default_avatar.png")
  personalWorkspaceId Int?     @unique

  personalWorkspace  Workspace?         @relation("PersonalWorkspace", fields: [personalWorkspaceId], references: [id])
  memberships        WorkspaceMember[]
  siteCollaborations SiteCollaborator[]

  @@index([personalWorkspaceId])
}

model Workspace {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique // For URL-friendly paths
  type      String   @default("team") // "personal" or "team"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  members      WorkspaceMember[]
  sites        Site[]
  personalUser User?             @relation("PersonalWorkspace") // NEW: Link to user if this is a personal workspace
}

model WorkspaceMember {
  id        Int      @id @default(autoincrement())
  role      String   @default("member") // "owner", "admin", "editor", "member"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  userId      Int
  user        User      @relation(fields: [userId], references: [id])

  @@unique([workspaceId, userId]) // A user can only have one role per workspace
  @@index([workspaceId])
  @@index([userId])
}

model Site {
  id              Int       @id @default(autoincrement())
  name            String // Friendly name for the site
  domain          String    @unique // The client's domain
  storageRegion   String    @default("us-east-1") // AWS region or equivalent
  isActive        Boolean   @default(true) // Toggle to enable/disable site
  lastPublishedAt DateTime? // Track when site was last published
  isPublic        Boolean   @default(false) // NEW: Is this site publicly viewable
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  workspaceId   Int
  workspace     Workspace          @relation(fields: [workspaceId], references: [id])
  publishEvents PublishEvent[]
  collaborators SiteCollaborator[] // NEW: Site-level collaborators

  @@index([workspaceId])
}

model SiteCollaborator {
  id              Int      @id @default(autoincrement())
  role            String // "editor", "viewer", etc.
  email           String? // Email for pending invites
  status          String   @default("pending") // "pending", "active"
  invitedByUserId Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  siteId Int
  site   Site  @relation(fields: [siteId], references: [id], onDelete: Cascade)
  userId Int? // Optional: null for pending invites by email
  user   User? @relation(fields: [userId], references: [id])

  @@unique([siteId, userId]) // A user can only have one role per site
  @@unique([siteId, email]) // An email can only have one invitation per site
  @@index([siteId])
  @@index([userId])
}

model PublishEvent {
  id          Int      @id @default(autoincrement())
  siteId      Int
  site        Site     @relation(fields: [siteId], references: [id])
  publishedAt DateTime @default(now())
  status      String // "success", "failed", etc.
  message     String? // Any details about the publish event

  // You could also track who triggered the publish
  publishedById Int?

  @@index([siteId])
}
