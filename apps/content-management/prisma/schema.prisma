generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                     @id @default(autoincrement())
  email                 String                  @unique
  name                  String? 
  password              String  
  systemRole            String                  @default("user") // "user", "admin", "superadmin"
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  image                 String                  @default("/images/default_avatar.png")
  // Relation to organizations
  memberships           OrganizationMember[]
}

model Organization {
  id                    Int                     @id @default(autoincrement())
  name                  String
  slug                  String                  @unique // For URL-friendly paths
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  // Relations
  members               OrganizationMember[]
  sites                 Site[]
}

model OrganizationMember {
  id                    Int                     @id @default(autoincrement())
  role                  String                  @default("member") // "owner", "admin", "editor", "member"
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  // Relations
  organizationId        Int
  organization          Organization            @relation(fields: [organizationId], references: [id])
  userId                Int 
  user                  User                    @relation(fields: [userId], references: [id])
  
  @@unique([organizationId, userId]) // A user can only have one role per organization
  @@index([organizationId])
  @@index([userId])
}

model Site {
  id                    Int                     @id @default(autoincrement())
  name                  String                  // Friendly name for the site
  domain                String                  @unique // The client's domain
  storageRegion         String                  @default("us-east-1") // AWS region or equivalent
  isActive              Boolean                 @default(true) // Toggle to enable/disable site
  lastPublishedAt       DateTime?               // Track when site was last published
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  // Relations
  organizationId        Int
  organization          Organization            @relation(fields: [organizationId], references: [id])
  publishEvents         PublishEvent[]
  
  @@index([organizationId])
}

model PublishEvent {
  id                    Int                     @id @default(autoincrement())
  siteId                Int 
  site                  Site                    @relation(fields: [siteId], references: [id])
  publishedAt           DateTime                @default(now())
  status                String                  // "success", "failed", etc.
  message               String?                 // Any details about the publish event
  
  // You could also track who triggered the publish
  publishedById         Int?
  
  @@index([siteId])
}